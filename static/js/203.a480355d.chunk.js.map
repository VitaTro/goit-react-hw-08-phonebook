{"version":3,"file":"static/js/203.a480355d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectErrors = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// створно складний селектор, який залежить від селектору контактового і селектору фільтру.\n// createSelector передає попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів\n// потім selectVisibleContacts повертає масив контактів, які відфільтровується\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nexport const List = styled.ul`\n  list-style: none;\n  margin-left: 600px;\n  margin-top: 10px;\n`;\nexport const Item = styled.li`\n  font-size: 18px;\n  color: darkred;\n`;\nexport const Button = styled.button`\n  margin-left: 30px;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 1px solid #8E43F6;\n  color: #fff;\n  background-color: #8E83F6;\n  font-size: 14px;\n\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: #8E99F6;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { Button, Item, List } from './ContactList.styled';\n\n// список контактів\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContacts(id));\n  };\n  return (\n    <List>\n      {contacts.map(contact => (\n        <Item key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n\n          <Button\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  color: #53545af5;\n  padding: 8px 12px;\n  width: 300px;\n  font: inherit;\n  cursor: pointer;\n  margin: 20px 600px 10px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { Input } from './Filter.styled';\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <Input\n      type=\"text\"\n      placeholder=\"Search contacts...\"\n      value={filter}\n      onChange={handleChange}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  // position: fixed;\n  width: 100%;\n  background-image: radial-gradient(circle at center, #ffeb3b 5%, #f89498 45%);\n  z-index: -1;\n  display: block;\n  overflow: scroll;\n  padding-bottom: 30px;\n`;\nexport const Wrapper = styled.h2`\n  font-size: 20px;\n  margin: 0 auto;\n  text-align: center;\n  color: brown;\n`;\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 21px;\n  border: 3px solid brown;\n  border-radius: 15px;\n  height: 40%;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  color: #000000;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  color: #53545af5;\n  padding: 8px 12px;\n  font: inherit;\n  cursor: pointer;\n  margin-top: 5px;\n`;\n\nexport const Button = styled.button`\n  padding: 8px 10px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #3c8092;\n  color: #fff;\n  background-color: #4cb0d4;\n  font-size: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: #4cd8d6;\n  }\n`;\n","import { nanoid } from '@reduxjs/toolkit';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport {\n  Button,\n  Form,\n  Input,\n  Label,\n  Section,\n  Wrapper,\n} from './ContactForm.styled';\n\n// створення унікальних ідентифікаторів для полів форми\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\n// додавання нового контакту у форму\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // відслідковування змін у полях вводу і оновлює відповідний стан\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  // обробка відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // перевірка форми на пусті поля\n    if (name.trim() === '' || number.trim() === '') return;\n\n    // перевірка, чи немає повторюваних імен\n    const isRepeating = contacts.some(contact => contact.name === name);\n    if (isRepeating) {\n      alert('Contact with this name already exists!');\n      return;\n    }\n\n    dispatch(addContacts({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Section>\n        <Wrapper>\n          <h2> Add contact, please</h2>\n          <Form onSubmit={handleSubmit}>\n            <Label htmlFor={nameInputId}>\n              Name\n              <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"name\"\n                value={name}\n                onChange={handleChange}\n                pattern=\"^[^\\d]+$\"\n                title=\"The name should contain only letters, apostrophes, hyphens, and indents\"\n                required\n              />\n            </Label>\n            <Label htmlFor={numberInputId}>\n              Number\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                placeholder=\"number\"\n                value={number}\n                onChange={handleChange}\n                pattern=\"\\+\\d{11}\"\n                minLength=\"12\"\n                maxLength=\"12\"\n                title=\"The phone number should start with + followed by 11 digits\"\n                required\n              />\n            </Label>\n            <Button type=\"submit\">Add contact </Button>\n          </Form>\n        </Wrapper>\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\n// import { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/auth/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\n\n// сторінка Контакти відповідає за відображення списку контактів та їх форми\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); //запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <Loader />}</div>\n      {/* <ContactList /> */}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","Button","_templateObject3","ContactList","useSelector","dispatch","useDispatch","_jsx","children","map","_jsxs","number","type","onClick","id","deleteContacts","Input","Filter","placeholder","value","onChange","e","changeFilter","target","Section","Wrapper","Form","Label","_templateObject4","_templateObject5","_templateObject6","nameInputId","nanoid","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","handleChange","_e$target","_Fragment","onSubmit","preventDefault","trim","some","alert","addContacts","htmlFor","pattern","title","required","minLength","maxLength","Contacts","isLoading","selectIsLoading","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}