{"version":3,"file":"static/js/500.1baf205c.chunk.js","mappings":"uQAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAQ/CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACL,EANyB,SAAAC,GAAK,OAAIA,EAAMK,MAAO,IAOhD,SAACJ,EAAUI,GACT,OAAOJ,EAASI,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,SCRIE,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAGTE,EAAc,WACzB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BP,EAAIS,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBnB,GAAWsB,EAAAA,EAAAA,IAAYxB,GACvByB,GAAWC,EAAAA,EAAAA,MAYjB,IAJmBxB,EAASyB,MAC1B,SAAApB,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAa,IAG9D,CAMAgB,GAASG,EAAAA,EAAAA,IAAY,CAAEpB,KAAAA,EAAMc,OAAAA,KAC7BH,EAAQ,IACRI,EAAU,IAGV,IAAMM,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,cAAlBxB,EAAIuB,EAAJvB,KAAMyB,EAAKF,EAALE,MACd,OAAQzB,GACN,IAAK,OACHW,EAAQc,GACR,MACF,IAAK,SACHV,EAAUU,GACV,MACF,QACE,OAEN,EAEA,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMC,SApCW,SAAAR,GACnBA,EAAES,gBACJ,EAkCiCH,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,SAAOG,QAAS7B,EAAYyB,SAAA,CAAC,QAE3BF,EAAAA,EAAAA,KAAA,SACEO,KAAK,OACLjC,KAAK,OACLkC,YAAY,OACZT,MAAOzB,EACPmC,SAAUd,EACVe,QAAQ,YACRC,MAAM,0EACNC,UAAQ,QAGZT,EAAAA,EAAAA,MAAA,SAAOG,QAAS3B,EAAcuB,SAAA,CAAC,UAE7BF,EAAAA,EAAAA,KAAA,SACEO,KAAK,MACLjC,KAAK,SACLkC,YAAY,SACZT,MAAOX,EACPqB,SAAUd,EACVe,QAAQ,aACRG,UAAU,KACVC,UAAU,KACVH,MAAM,6DACNC,UAAQ,QAGZZ,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAAQL,SAAC,qBArD5B,CAFEa,IAAAA,OAAgB,GAADC,OAAI1C,EAAI,kCA4D3B,ECpFa2C,EAAc,WACzB,IAAMjD,GAAWsB,EAAAA,EAAAA,IAAYpB,GACvBqB,GAAWC,EAAAA,EAAAA,MAEjB,OACEQ,EAAAA,EAAAA,KAAA,MAAAE,SACGlC,EAASkD,KAAI,SAAA7C,GAAO,OACnB8B,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACG7B,EAAQC,KAAO,MAAQD,EAAQe,QAE9BY,EAAAA,EAAAA,KAAA,UACEO,KAAK,SACLjC,KAAK,SACL6C,QAAS,kBAAM5B,EAAS6B,EAAAA,GAAe,EAAClB,SACzC,aAPI7B,EAAQgD,GAWZ,KAIb,E,8BCjBe,SAASC,IACtB,IAAM/B,GAAWC,EAAAA,EAAAA,MACX+B,GAAYjC,EAAAA,EAAAA,IAAYkC,EAAAA,IAM9B,OAJAC,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,MACX,GAAG,CAACnC,KAGFY,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAAAzB,UACLF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qBAETF,EAAAA,EAAAA,KAACpB,EAAW,KACZoB,EAAAA,EAAAA,KAAA,OAAAE,SAAMqB,IAAavB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,OAC1B5B,EAAAA,EAAAA,KAACiB,EAAW,MAGlB,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectErrors = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// створно складний селектор, який залежить від селектору контактового і селектору фільтру.\n// createSelector передає попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів\n// потім selectVisibleContacts повертає масив контактів, які відфільтровується\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { nanoid } from '@reduxjs/toolkit';\nimport Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\n// створення унікальних ідентифікаторів для полів форми\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\n// додавання нового контакту у форму\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // обробка відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  // перевірка, чи такий контакт вже є у списку\n  const isContacts = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n\n  if (isContacts) {\n    Notiflix.Notify(`${name} is in use. Try another name. `);\n    return;\n  }\n\n  // йде відправка дії для додавання нового контакту до Redux store\n  dispatch(addContacts({ name, number }));\n  setName('');\n  setNumber('');\n\n  // обробка зміни значень полів форми\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[^\\d]+$\"\n            title=\"The name should contain only letters, apostrophes, hyphens, and indents\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+\\d{11}\"\n            minlength=\"12\"\n            maxlength=\"12\"\n            title=\"The phone number should start with + followed by 11 digits\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact </button>\n      </form>\n      {/* <Filter /> */}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\n// список контактів\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n          {\n            <button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContacts)}\n            >\n              Delete\n            </button>\n          }\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/auth/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\n\n// сторінка Контакти відповідає за відображення списку контактів та їх форми\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); //запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <Loader />}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","nameInputId","nanoid","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","some","addContacts","handleChange","e","_e$currentTarget","currentTarget","value","_jsx","_Fragment","children","_jsxs","onSubmit","preventDefault","htmlFor","type","placeholder","onChange","pattern","title","required","minlength","maxlength","Notiflix","concat","ContactList","map","onClick","deleteContacts","id","Contacts","isLoading","selectIsLoading","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}