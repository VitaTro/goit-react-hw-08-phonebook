{"version":3,"file":"static/js/819.33e3899a.chunk.js","mappings":"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","sources":["redux/contacts/operations.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// створення асинхронічного запиту на показ контактів\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get('/contacts');\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n// створення асинхронічного запиту на створення нового контакту\nexport const addContacts = createAsyncThunk(\n  'contacts/addContacts',\n  async ({ name, number }, thunkAPI) => {\n    try {\n      // надсилання POST-запиту на '/contacts' з даними { name, number }\n      const response = await axios.post('/contacts', { name, number });\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n// створення асинхронічного запиту на видалення контакту\nexport const deleteContacts = createAsyncThunk(\n  'contacts/deleteContacts',\n  async (contactId, thunkAPI) => {\n    try {\n      // надсилання DELETE-запиту на '/contacts'\n      const response = await axios.delete(`/contact/${contactId}`);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectErrors = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// створно складний селектор, який залежить від селектору контактового і селектору фільтру.\n// createSelector передає попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів\n// потім selectVisibleContacts повертає масив контактів, які відфільтровується\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { nanoid } from '@reduxjs/toolkit';\nimport Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\n// створення унікальних ідентифікаторів для полів форми\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\n// додавання нового контакту у форму\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // обробка відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  // перевірка, чи такий контакт вже є у списку\n  const isContacts = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n\n  if (isContacts) {\n    Notiflix.Notify(`${name} is in use. Try another name. `);\n    return;\n  }\n\n  // йде відправка дії для додавання нового контакту до Redux store\n  dispatch(addContacts({ name, number }));\n  setName('');\n  setNumber('');\n\n  // обробка зміни значень полів форми\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[^\\d]+$\"\n            title=\"The name should contain only letters, apostrophes, hyphens, and indents\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+\\d{11}\"\n            minlength=\"12\"\n            maxlength=\"12\"\n            title=\"The phone number should start with + followed by 11 digits\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact </button>\n      </form>\n      {/* <Filter /> */}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\n// список контактів\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n          {\n            <button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContacts)}\n            >\n              Delete\n            </button>\n          }\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/auth/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\n\n// сторінка Контакти відповідає за відображення списку контактів та їх форми\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); //запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <Loader />}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["fetchContacts","createAsyncThunk","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_","thunkAPI","response","_context","prev","next","axios","sent","abrupt","data","t0","rejectWithValue","message","stop","_x","_x2","apply","arguments","addContacts","_ref3","_callee2","_ref2","name","number","_context2","_x3","_x4","deleteContacts","_ref4","_callee3","contactId","_context3","concat","_x5","_x6","selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","contact","toLowerCase","includes","nameInputId","nanoid","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","useSelector","dispatch","useDispatch","some","handleChange","e","_e$currentTarget","currentTarget","value","_jsx","_Fragment","children","_jsxs","onSubmit","preventDefault","htmlFor","type","placeholder","onChange","pattern","title","required","minlength","maxlength","Notiflix","ContactList","map","onClick","id","Contacts","isLoading","selectIsLoading","useEffect","Helmet","Loader"],"sourceRoot":""}