{"version":3,"file":"static/js/500.214d377e.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectErrors = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// створно складний селектор, який залежить від селектору контактового і селектору фільтру.\n// createSelector передає попередньо створені селектори та функцію, яка обчислює відфільтрований масив контактів\n// потім selectVisibleContacts повертає масив контактів, які відфільтровується\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { nanoid } from '@reduxjs/toolkit';\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\n// створення унікальних ідентифікаторів для полів форми\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\n// додавання нового контакту у форму\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // відслідковування змін у полях вводу і оновлює відповідний стан\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  // обробка відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // перевірка форми на пусті поля\n    if (name.trim() === '' || number.trim() === '') return;\n\n    // перевірка, чи немає повторюваних імен\n    const isRepeating = contacts.some(contact => contact.name === name);\n    if (isRepeating) {\n      alert('Contact with this name already exists!');\n      return;\n    }\n\n    dispatch(addContacts({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[^\\d]+$\"\n            title=\"The name should contain only letters, apostrophes, hyphens, and indents\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+\\d{11}\"\n            minlength=\"12\"\n            maxlength=\"12\"\n            title=\"The phone number should start with + followed by 11 digits\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact </button>\n      </form>\n      {/* <Filter /> */}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\n// список контактів\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name + ' : ' + contact.number}\n          {\n            <button\n              type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContacts)}\n            >\n              Delete\n            </button>\n          }\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from '../redux/auth/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\n\n// сторінка Контакти відповідає за відображення списку контактів та їх форми\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); //запит для отримання контактів з сервера\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <Loader />}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","nameInputId","nanoid","numberInputId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","_e$target","target","value","_jsx","_Fragment","children","_jsxs","onSubmit","preventDefault","trim","some","alert","addContacts","htmlFor","type","placeholder","onChange","pattern","title","required","minlength","maxlength","ContactList","map","onClick","deleteContacts","id","Contacts","isLoading","selectIsLoading","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}